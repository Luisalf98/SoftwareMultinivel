/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.loyder.software.views;

import com.loyder.software.main.ApplicationStarter;
import com.loyder.software.model.dao.config.DatabaseConnection;
import com.loyder.software.model.entities.User;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JPanel;

/**
 *
 * @author Luis Perez
 */
public class MultiLevelNetworkDrawer extends javax.swing.JPanel {

    /**
     * Creates new form MultiLevelNetworkDrawer
     */
    private final JPanel panelParent;

    private Long dataRecommenderId;

    public MultiLevelNetworkDrawer(JPanel panelParent1) {
        initComponents();
        this.panelParent = panelParent1;
        
    }

    public void setData(Long id) {
        this.dataRecommenderId = id;
        this.tree = new HashMap<>();
        treeDepth = 0;

        User user;
        if (dataRecommenderId.equals(-1L)) {
            user = ApplicationStarter.COMPANY_ROOT;
        } else {
            user = DatabaseConnection.getUserDao().getUserById(dataRecommenderId);
        }
        tree.put(dataRecommenderId, new Node(user.getId() + ": " + user.getName() + " " + user.getLastName()));
        
        space = treeVisit(dataRecommenderId, 1);
        
        this.panelDraw.setPreferredSize(new Dimension(space+200, (treeDepth+1)*100));
        
        this.panelDraw.repaint();
    }

    private int treeDepth;
    private HashMap<Long, Node> tree;
    private int space;

    public int treeVisit(Long nodeId, int lvl) {
        int spc;
        ArrayList<User> children = DatabaseConnection.getUserDao().getUserChildsById(nodeId);
        int len = children.size();
        if (len == 0) {
            treeDepth = lvl > treeDepth ? lvl : treeDepth;
            spc = 100;
        } else {
            int max = -1;
            for (User u : children) {
                tree.put(u.getId(), new Node(u.getId() + ": " + u.getName() + " " + u.getLastName()));
                tree.get(nodeId).children.add(u.getId());
                int val = treeVisit(u.getId(), lvl + 1);
                max = val > max ? val : max;
            }
            spc = max * len;
        }
        return spc;

    }

    public void drawingTree(Long nodeId, int space, int x, int y, Graphics2D g) {
        int len = tree.get(nodeId).getChildren().size();
        if (len > 0) {
            int sp = space / len;
            int spsp = space + sp;
            int x1 = x - (spsp) / 2;
            int yn = y + 100;
            int count = 0;
            int len1 = len + 1;
            for (Long n : tree.get(nodeId).getChildren()) {
                count++;
                int xn = (x1) + spsp * count / len1;
                g.setColor(Color.BLACK);
                g.drawLine(x, y, xn, yn);
                drawingTree(n, sp, xn, yn, g);
            }
        }
        
        g.setColor(Color.CYAN);
        g.fillOval(x - 20, y - 20, 40, 40);
        g.setColor(Color.red);
        g.drawString(tree.get(nodeId).getInfo(), x-20, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTopBar = new javax.swing.JPanel();
        buttonGoBack = new javax.swing.JButton();
        scrollPanePanelDraw = new javax.swing.JScrollPane();
        panelDraw = new JPanel(){
            @Override
            public void paint(Graphics g1){
                super.paint(g1);

                Graphics2D g = (Graphics2D)g1;

                g.setColor(Color.WHITE);
                g.fillRect(0, 0, this.getWidth(), this.getHeight());

                drawingTree(dataRecommenderId, space, panelDraw.getWidth()/2, 100, g);
            }
        };

        setLayout(new java.awt.BorderLayout());

        panelTopBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonGoBack.setText("Atr√°s");
        buttonGoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGoBackActionPerformed(evt);
            }
        });
        panelTopBar.add(buttonGoBack);

        add(panelTopBar, java.awt.BorderLayout.PAGE_START);

        panelDraw.setLayout(new java.awt.BorderLayout());
        scrollPanePanelDraw.setViewportView(panelDraw);

        add(scrollPanePanelDraw, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonGoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGoBackActionPerformed
        // TODO add your handling code here:
        ((CardLayout) panelParent.getLayout()).show(panelParent, UsersView.class.getName());
    }//GEN-LAST:event_buttonGoBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonGoBack;
    private javax.swing.JPanel panelDraw;
    private javax.swing.JPanel panelTopBar;
    private javax.swing.JScrollPane scrollPanePanelDraw;
    // End of variables declaration//GEN-END:variables

    private static class Node {

        int x;
        int y;
        String info;
        ArrayList<Long> children;

        public Node(String info) {
            this.info = info;
            this.children = new ArrayList<>();
        }

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getY() {
            return y;
        }

        public void setY(int y) {
            this.y = y;
        }

        public String getInfo() {
            return info;
        }

        public void setInfo(String info) {
            this.info = info;
        }

        public ArrayList<Long> getChildren() {
            return children;
        }

        public void setChildren(ArrayList<Long> children) {
            this.children = children;
        }

    }
}
