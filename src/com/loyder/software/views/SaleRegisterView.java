/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.loyder.software.views;

import com.loyder.software.main.ApplicationStarter;
import com.loyder.software.model.dao.config.DatabaseConfig.SaleState;
import com.loyder.software.model.dao.config.DatabaseConfig.SaleType;
import com.loyder.software.model.dao.config.DatabaseConnection;
import com.loyder.software.model.entities.Bonus;
import com.loyder.software.model.entities.Income;
import com.loyder.software.model.entities.Percentage;
import com.loyder.software.model.entities.Product;
import com.loyder.software.model.entities.Sale;
import com.loyder.software.model.entities.User;
import java.awt.CardLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luis Perez
 */
public class SaleRegisterView extends javax.swing.JPanel {

    /**
     * Creates new form SaleRegisterView
     */
    private final JPanel panelParent;

    private final DefaultTableModel tableCustomersModel;
    private final DefaultTableModel tableProductsModel;
    private final DefaultTableModel tableProductsBillModel;

    private final DefaultComboBoxModel comboBoxSaleStateModel;
    private final DefaultComboBoxModel comboBoxSaleTypeModel;

    public static final String[][] EMPTY_TABLE = new String[0][0];

    private static final String[] TABLE_CUSTOMERS_HEADER = {"Código", "Cédula", "Nombre", "Código Categoría"};
    private static final String[] TABLE_PRODUCTS_HEADER = {"Código", "Nombre", "Descripción", "Precio"};
    private static final String[] TABLE_PRODUCTS_BILL_HEADER = {"Código Producto", "Nombre", "Valor Unidad", "Cantidad", "Total"};

    private Double saleTotal;

    public SaleRegisterView(JPanel panelParent1) {
        initComponents();

        this.panelParent = panelParent1;

        tableCustomers.setDragEnabled(false);
        tableCustomers.getTableHeader().setReorderingAllowed(false);
        tableProducts.setDragEnabled(false);
        tableProducts.getTableHeader().setReorderingAllowed(false);
        tableProductsBill.setDragEnabled(false);
        tableProductsBill.getTableHeader().setReorderingAllowed(false);

        tableCustomersModel = (DefaultTableModel) tableCustomers.getModel();
        tableProductsModel = (DefaultTableModel) tableProducts.getModel();
        tableProductsBillModel = (DefaultTableModel) tableProductsBill.getModel();

        comboBoxSaleStateModel = (DefaultComboBoxModel) comboBoxSaleState.getModel();
        comboBoxSaleTypeModel = (DefaultComboBoxModel) comboBoxSaleType.getModel();

        comboBoxSaleStateModel.removeAllElements();
        comboBoxSaleTypeModel.removeAllElements();

        comboBoxSaleTypeModel.addElement(SaleType.CONTADO);
        comboBoxSaleTypeModel.addElement(SaleType.CREDITO);

        comboBoxSaleStateModel.addElement(SaleState.NO_PAGADA);
        comboBoxSaleStateModel.addElement(SaleState.PAGADA);

        this.saleTotal = 0D;
        this.labelSaleTotalValue.setText(saleTotal.toString());

        this.comboBoxSaleState.setSelectedIndex(-1);
        this.comboBoxSaleType.setSelectedIndex(-1);

        this.buttonGoBack.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                ((CardLayout) panelParent.getLayout()).show(panelParent, SalesView.class.getName());
            }
        });
    }

    public void setData() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelTopBar = new javax.swing.JPanel();
        buttonGoBack = new javax.swing.JButton();
        panelContainer = new javax.swing.JPanel();
        panelProductsForm = new javax.swing.JPanel();
        submitButtonPanel1 = new javax.swing.JPanel();
        labelProductQuantity = new javax.swing.JLabel();
        textFieldProductQuantity = new javax.swing.JFormattedTextField();
        addProductToBill = new javax.swing.JButton();
        scrollPanePanelProducts = new javax.swing.JScrollPane();
        panelProducts = new javax.swing.JPanel();
        searchProductsPanel = new javax.swing.JPanel();
        productNameSearchLabel = new javax.swing.JLabel();
        productIdSearchTextField = new javax.swing.JFormattedTextField();
        productNameSearchButton = new javax.swing.JButton();
        productIdSearchLabel = new javax.swing.JLabel();
        productNameSearchTextField = new javax.swing.JTextField();
        productIdSearchButton = new javax.swing.JButton();
        buttonShowAllProducts = new javax.swing.JButton();
        productsTableScrollPane = new javax.swing.JScrollPane();
        tableProducts = new JTable(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        scrollPanePanelCustomers = new javax.swing.JScrollPane();
        addedTablePanel = new javax.swing.JPanel();
        searchRecommenderAddedPanel = new javax.swing.JPanel();
        customerNameSearchLabel = new javax.swing.JLabel();
        customerIdSearchTextField = new javax.swing.JFormattedTextField();
        customerNameSearchButton = new javax.swing.JButton();
        customerIdSearchLabel = new javax.swing.JLabel();
        customerNameSearchTextField = new javax.swing.JTextField();
        customerIdSearchButton = new javax.swing.JButton();
        customerUserIdSearchLabel = new javax.swing.JLabel();
        customerUserIdSearchTextField = new javax.swing.JFormattedTextField();
        customerUserIdSearchButton = new javax.swing.JButton();
        buttonShowAllCustomers = new javax.swing.JButton();
        recommenderAddedTableScrollPane = new javax.swing.JScrollPane();
        tableCustomers = new JTable(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        panelBillForm = new javax.swing.JPanel();
        billTableScrollPane = new javax.swing.JScrollPane();
        tableProductsBill = new JTable(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        panelBillFooter = new javax.swing.JPanel();
        deleteProduct = new javax.swing.JButton();
        panelBilling = new javax.swing.JPanel();
        submitSaleBill = new javax.swing.JButton();
        labelSaleTotal = new javax.swing.JLabel();
        labelSaleTotalValue = new javax.swing.JLabel();
        labelSaleType = new javax.swing.JLabel();
        labelSaleState = new javax.swing.JLabel();
        comboBoxSaleType = new javax.swing.JComboBox<>();
        comboBoxSaleState = new javax.swing.JComboBox<>();

        setLayout(new java.awt.BorderLayout());

        panelTopBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonGoBack.setText("Atrás");
        panelTopBar.add(buttonGoBack);

        add(panelTopBar, java.awt.BorderLayout.NORTH);

        panelContainer.setLayout(new java.awt.GridLayout(2, 2));

        panelProductsForm.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Productos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 14))); // NOI18N
        panelProductsForm.setLayout(new java.awt.BorderLayout());

        labelProductQuantity.setText("Cantidad: ");
        submitButtonPanel1.add(labelProductQuantity);

        textFieldProductQuantity.setColumns(10);
        textFieldProductQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        submitButtonPanel1.add(textFieldProductQuantity);

        addProductToBill.setText("Agregar");
        addProductToBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProductToBillActionPerformed(evt);
            }
        });
        submitButtonPanel1.add(addProductToBill);

        panelProductsForm.add(submitButtonPanel1, java.awt.BorderLayout.SOUTH);

        panelProducts.setLayout(new java.awt.BorderLayout());

        searchProductsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        searchProductsPanel.setLayout(new java.awt.GridBagLayout());

        productNameSearchLabel.setText("Nombre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchProductsPanel.add(productNameSearchLabel, gridBagConstraints);

        productIdSearchTextField.setColumns(20);
        productIdSearchTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchProductsPanel.add(productIdSearchTextField, gridBagConstraints);

        productNameSearchButton.setText("Buscar");
        productNameSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productNameSearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchProductsPanel.add(productNameSearchButton, gridBagConstraints);

        productIdSearchLabel.setText("Código:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchProductsPanel.add(productIdSearchLabel, gridBagConstraints);

        productNameSearchTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchProductsPanel.add(productNameSearchTextField, gridBagConstraints);

        productIdSearchButton.setText("Buscar");
        productIdSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productIdSearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchProductsPanel.add(productIdSearchButton, gridBagConstraints);

        buttonShowAllProducts.setText("Mostrar todos");
        buttonShowAllProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowAllProductsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        searchProductsPanel.add(buttonShowAllProducts, gridBagConstraints);

        panelProducts.add(searchProductsPanel, java.awt.BorderLayout.NORTH);

        productsTableScrollPane.setVerifyInputWhenFocusTarget(false);

        tableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Descripción", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProducts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        productsTableScrollPane.setViewportView(tableProducts);

        panelProducts.add(productsTableScrollPane, java.awt.BorderLayout.CENTER);

        scrollPanePanelProducts.setViewportView(panelProducts);

        panelProductsForm.add(scrollPanePanelProducts, java.awt.BorderLayout.CENTER);

        panelContainer.add(panelProductsForm);

        addedTablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Comprador", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        addedTablePanel.setLayout(new java.awt.BorderLayout());

        searchRecommenderAddedPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        searchRecommenderAddedPanel.setLayout(new java.awt.GridBagLayout());

        customerNameSearchLabel.setText("Nombre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerNameSearchLabel, gridBagConstraints);

        customerIdSearchTextField.setColumns(20);
        customerIdSearchTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerIdSearchTextField, gridBagConstraints);

        customerNameSearchButton.setText("Buscar");
        customerNameSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerNameSearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerNameSearchButton, gridBagConstraints);

        customerIdSearchLabel.setText("Código:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerIdSearchLabel, gridBagConstraints);

        customerNameSearchTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerNameSearchTextField, gridBagConstraints);

        customerIdSearchButton.setText("Buscar");
        customerIdSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerIdSearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerIdSearchButton, gridBagConstraints);

        customerUserIdSearchLabel.setText("Cédula:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerUserIdSearchLabel, gridBagConstraints);

        customerUserIdSearchTextField.setColumns(20);
        customerUserIdSearchTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerUserIdSearchTextField, gridBagConstraints);

        customerUserIdSearchButton.setText("Buscar");
        customerUserIdSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerUserIdSearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        searchRecommenderAddedPanel.add(customerUserIdSearchButton, gridBagConstraints);

        buttonShowAllCustomers.setText("Mostrar todos");
        buttonShowAllCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowAllCustomersActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        searchRecommenderAddedPanel.add(buttonShowAllCustomers, gridBagConstraints);

        addedTablePanel.add(searchRecommenderAddedPanel, java.awt.BorderLayout.PAGE_START);

        tableCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Cédula", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCustomers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        recommenderAddedTableScrollPane.setViewportView(tableCustomers);

        addedTablePanel.add(recommenderAddedTableScrollPane, java.awt.BorderLayout.CENTER);

        scrollPanePanelCustomers.setViewportView(addedTablePanel);

        panelContainer.add(scrollPanePanelCustomers);

        panelBillForm.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Factura", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 14))); // NOI18N
        panelBillForm.setLayout(new java.awt.BorderLayout());

        tableProductsBill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Producto", "Nombre", "Valor Unidad", "Cantidad", "Valor Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProductsBill.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        billTableScrollPane.setViewportView(tableProductsBill);

        panelBillForm.add(billTableScrollPane, java.awt.BorderLayout.CENTER);

        deleteProduct.setText("Quitar Producto");
        deleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductActionPerformed(evt);
            }
        });
        panelBillFooter.add(deleteProduct);

        panelBillForm.add(panelBillFooter, java.awt.BorderLayout.SOUTH);

        panelContainer.add(panelBillForm);

        panelBilling.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Generar Venta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        panelBilling.setLayout(new java.awt.GridBagLayout());

        submitSaleBill.setText("Generar venta");
        submitSaleBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitSaleBillActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBilling.add(submitSaleBill, gridBagConstraints);

        labelSaleTotal.setText("Total venta: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBilling.add(labelSaleTotal, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBilling.add(labelSaleTotalValue, gridBagConstraints);

        labelSaleType.setText("Tipo de venta: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBilling.add(labelSaleType, gridBagConstraints);

        labelSaleState.setText("Estado de venta: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBilling.add(labelSaleState, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBilling.add(comboBoxSaleType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        panelBilling.add(comboBoxSaleState, gridBagConstraints);

        panelContainer.add(panelBilling);

        add(panelContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonShowAllCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowAllCustomersActionPerformed
        // TODO add your handling code here:
        tableCustomersModel.setDataVector(EMPTY_TABLE, TABLE_CUSTOMERS_HEADER);
        ArrayList<User> users = DatabaseConnection.getUserDao().getAllUsers();

        if (users != null && !users.isEmpty()) {
            users.forEach(user -> {
                tableCustomersModel.addRow(new Object[]{user.getId(), user.getUserId(),
                    user.getName() + " " + user.getLastName(), user.getCategoryId()

                });
            });
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron resultados.");
        }
    }//GEN-LAST:event_buttonShowAllCustomersActionPerformed

    private void buttonShowAllProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowAllProductsActionPerformed
        // TODO add your handling code here:
        tableProductsModel.setDataVector(EMPTY_TABLE, TABLE_PRODUCTS_HEADER);
        ArrayList<Product> products = DatabaseConnection.getProductDao().getAllProducts();

        if (products != null && !products.isEmpty()) {
            products.forEach(product -> {
                tableProductsModel.addRow(new Object[]{product.getId(), product.getName(),
                    product.getDescription(), ApplicationStarter.CURRENCY_FORMAT.format(product.getPrice())
                });
            });
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron resultados.");
        }
    }//GEN-LAST:event_buttonShowAllProductsActionPerformed

    private void productIdSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productIdSearchButtonActionPerformed
        // TODO add your handling code here:
        Long id = (Long) productIdSearchTextField.getValue();
        if (id == null) {
            JOptionPane.showMessageDialog(null, "Campo vacío o valor introducido inválido!");
            return;
        }

        productIdSearchTextField.setText("");
        productIdSearchTextField.setValue(null);

        tableProductsModel.setDataVector(EMPTY_TABLE, TABLE_PRODUCTS_HEADER);
        Product product = DatabaseConnection.getProductDao().getProductById(id);

        if (product != null) {
            tableProductsModel.addRow(new Object[]{product.getId(), product.getName(),
                product.getDescription(), ApplicationStarter.CURRENCY_FORMAT.format(product.getPrice())
            });
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el producto con el código especificado.");
        }
    }//GEN-LAST:event_productIdSearchButtonActionPerformed

    private void productNameSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameSearchButtonActionPerformed
        // TODO add your handling code here:
        String name = productNameSearchTextField.getText();
        if (name.equals("")) {
            JOptionPane.showMessageDialog(null, "Campo vacío!");
            return;
        }

        productNameSearchTextField.setText("");

        tableProductsModel.setDataVector(EMPTY_TABLE, TABLE_PRODUCTS_HEADER);
        ArrayList<Product> products = DatabaseConnection.getProductDao().getProductByName(name);

        if (products != null && !products.isEmpty()) {
            products.forEach(product -> {
                tableProductsModel.addRow(new Object[]{product.getId(), product.getName(),
                    product.getDescription(), ApplicationStarter.CURRENCY_FORMAT.format(product.getPrice())
                });
            });
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron resultados.");
        }
    }//GEN-LAST:event_productNameSearchButtonActionPerformed

    private void customerNameSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerNameSearchButtonActionPerformed
        // TODO add your handling code here:
        String name = customerNameSearchTextField.getText();
        if (name.equals("")) {
            JOptionPane.showMessageDialog(null, "Campo vacío!");
            return;
        }

        customerNameSearchTextField.setText("");

        tableCustomersModel.setDataVector(EMPTY_TABLE, TABLE_CUSTOMERS_HEADER);
        ArrayList<User> users = DatabaseConnection.getUserDao().getUsersByName(name);

        if (users != null && !users.isEmpty()) {
            users.forEach(user -> {
                tableCustomersModel.addRow(new Object[]{user.getId(), user.getUserId(),
                    user.getName() + " " + user.getLastName(), user.getCategoryId()
                });
            });
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron resultados.");
        }
    }//GEN-LAST:event_customerNameSearchButtonActionPerformed

    private void customerIdSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerIdSearchButtonActionPerformed
        // TODO add your handling code here:
        Long id = (Long) customerIdSearchTextField.getValue();
        if (id == null) {
            JOptionPane.showMessageDialog(null, "Campo vacío o valor digitado inválido!");
            return;
        }

        customerIdSearchTextField.setText("");
        customerIdSearchTextField.setValue(null);

        tableCustomersModel.setDataVector(EMPTY_TABLE, TABLE_CUSTOMERS_HEADER);
        User user = DatabaseConnection.getUserDao().getUserById(id);

        if (user != null) {
            tableCustomersModel.addRow(new Object[]{user.getId(), user.getUserId(),
                user.getName() + " " + user.getLastName(), user.getCategoryId()
            });
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron resultados.");
        }
    }//GEN-LAST:event_customerIdSearchButtonActionPerformed

    private void customerUserIdSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerUserIdSearchButtonActionPerformed
        // TODO add your handling code here:
        Long userId = (Long) customerUserIdSearchTextField.getValue();
        if (userId == null) {
            JOptionPane.showMessageDialog(null, "Campo vacío o valor digitado inválido!");
            return;
        }

        customerUserIdSearchTextField.setText("");
        customerUserIdSearchTextField.setValue(null);

        tableCustomersModel.setDataVector(EMPTY_TABLE, TABLE_CUSTOMERS_HEADER);
        User user = DatabaseConnection.getUserDao().getUserByUserId(userId);

        if (user != null) {
            tableCustomersModel.addRow(new Object[]{user.getId(), user.getUserId(),
                user.getName() + " " + user.getLastName(), user.getCategoryId()
            });
        } else {
            JOptionPane.showMessageDialog(null, "No se encontraron resultados.");
        }
    }//GEN-LAST:event_customerUserIdSearchButtonActionPerformed

    private void addProductToBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProductToBillActionPerformed
        // TODO add your handling code here:
        if (tableProducts.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "No seleccionó un producto!");
            return;
        }

        Long quantity = (Long) textFieldProductQuantity.getValue();
        if (quantity == null) {
            JOptionPane.showMessageDialog(null, "Campo Cantidad vacío o Valor digitado inválido!");
            return;
        }

        this.textFieldProductQuantity.setText("");
        this.textFieldProductQuantity.setValue(null);

        Long productId = (Long) tableProducts.getValueAt(tableProducts.getSelectedRow(), 0);
        Product p = DatabaseConnection.getProductDao().getProductById(productId);
        String name = p.getName();
        Double price = p.getPrice();
        Double total = quantity * price;
        tableProductsBillModel.addRow(new Object[]{
            productId, name, ApplicationStarter.CURRENCY_FORMAT.format(price), quantity, 
            ApplicationStarter.CURRENCY_FORMAT.format(total)
        });

        this.saleTotal += total;
        this.labelSaleTotalValue.setText(ApplicationStarter.CURRENCY_FORMAT.format(this.saleTotal));
    }//GEN-LAST:event_addProductToBillActionPerformed

    private void deleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductActionPerformed
        // TODO add your handling code here:
        if (tableProductsBill.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "No se seleccionó un producto!");
            return;
        }

        Long productId = (Long) tableProductsBill.getValueAt(tableProductsBill.getSelectedRow(), 0);
        Long quantity = (Long) tableProductsBill.getValueAt(tableProductsBill.getSelectedRow(), 3);
        Product p = DatabaseConnection.getProductDao().getProductById(productId);
        tableProductsBillModel.removeRow(tableProductsBill.getSelectedRow());
        this.saleTotal -= quantity*p.getPrice();
        this.labelSaleTotalValue.setText(ApplicationStarter.CURRENCY_FORMAT.format(this.saleTotal));
    }//GEN-LAST:event_deleteProductActionPerformed

    private void submitSaleBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitSaleBillActionPerformed
        // TODO add your handling code here:
        if (tableCustomers.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "No se seleccionó un comprador!");
            return;
        }
        if (this.comboBoxSaleState.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "No se seleccionó el estado de la venta!");
            return;
        }
        if (this.comboBoxSaleType.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "No se seleccionó el tipo de venta!");
            return;
        }
        if (tableProductsBill.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No se han añadido productos a la lista!");
            return;
        }
        Long buyerId = (Long) tableCustomers.getValueAt(tableCustomers.getSelectedRow(), 0);
        SaleType type = (SaleType) comboBoxSaleType.getSelectedItem();
        SaleState state = (SaleState) comboBoxSaleState.getSelectedItem();
        Sale sale = new Sale(null, buyerId, System.currentTimeMillis(), this.saleTotal, type.toString(), state.toString());

        ArrayList<Sale.Detail> details = new ArrayList<>();
        for (int i = 0; i < tableProductsBill.getRowCount(); i++) {
            Long quantity = (Long) tableProductsBill.getValueAt(i, 3);
            Long productId = (Long) tableProductsBill.getValueAt(i, 0);
            Sale.Detail detail = new Sale.Detail(quantity, productId, null);

            details.add(detail);
        }

        Long saleId = DatabaseConnection.getSaleDao().addSale(sale, details);
        if (!saleId.equals(-1L)) {
            JOptionPane.showMessageDialog(null, "Registro de venta exitoso!");
            if(state.toString().equals(SaleState.PAGADA.toString())){
                User buyer = DatabaseConnection.getUserDao().getUserById(buyerId);
                User adder;
                if(buyer.getAdderId().equals(-1L)){
                    adder = ApplicationStarter.COMPANY_ROOT;
                }else{
                    adder = DatabaseConnection.getUserDao().getUserById(buyer.getAdderId());
                }
                
                ArrayList<Percentage> percentages = DatabaseConnection.getPercentageDao().getAllPercentages();
                System.out.println(percentages);
                percentages.sort((Percentage p1, Percentage p2) -> {
                    if (p1.getId() > p2.getId()) {
                        return 1;
                    } else if (p1.getId() < p2.getId()) {
                        return -1;
                    }
                    return 0;
                });
                System.out.println(percentages);
                Double totalBonuses = 0D, bonus = 0D;
                for (int i = 0; i < percentages.size() && !adder.getId().equals(-1L); i++) {
                    bonus = this.saleTotal * percentages.get(i).getPercentage();
                    Bonus b = new Bonus(null, percentages.get(i).getId(), saleId, bonus, adder.getId(), System.currentTimeMillis());
                    if (!DatabaseConnection.getBonusDao().addBonus(b)) {
                        JOptionPane.showMessageDialog(null, "Error al registrar bonificacion!");
                        return;
                    }
                    totalBonuses += bonus;
                    if (adder.getAdderId().equals(-1L)) {
                        adder = ApplicationStarter.COMPANY_ROOT;
                    } else {
                        adder = DatabaseConnection.getUserDao().getUserById(adder.getAdderId());
                    }

                }
                JOptionPane.showMessageDialog(null, "Se agregaron las bonificaciones!");
                
                Income income = new Income(null, saleId, System.currentTimeMillis(), saleTotal, totalBonuses, saleTotal-totalBonuses);
                if(!DatabaseConnection.getIncomeDao().addIncome(income)){
                    JOptionPane.showMessageDialog(null, "Error al registrar ingreso!");
                    return;
                }
                JOptionPane.showMessageDialog(null, "Se agregó el ingreso!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo registrar la venta!");
            return;
        }
        this.tableCustomersModel.setDataVector(EMPTY_TABLE, TABLE_CUSTOMERS_HEADER);
        this.tableProductsModel.setDataVector(EMPTY_TABLE, TABLE_PRODUCTS_HEADER);
        this.tableProductsBillModel.setDataVector(EMPTY_TABLE, TABLE_PRODUCTS_BILL_HEADER);

        this.comboBoxSaleState.setSelectedIndex(-1);
        this.comboBoxSaleType.setSelectedIndex(-1);

        this.saleTotal = 0D;
        this.labelSaleTotalValue.setText(this.saleTotal.toString());
    }//GEN-LAST:event_submitSaleBillActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProductToBill;
    private javax.swing.JPanel addedTablePanel;
    private javax.swing.JScrollPane billTableScrollPane;
    private javax.swing.JButton buttonGoBack;
    private javax.swing.JButton buttonShowAllCustomers;
    private javax.swing.JButton buttonShowAllProducts;
    private javax.swing.JComboBox<String> comboBoxSaleState;
    private javax.swing.JComboBox<String> comboBoxSaleType;
    private javax.swing.JButton customerIdSearchButton;
    private javax.swing.JLabel customerIdSearchLabel;
    private javax.swing.JFormattedTextField customerIdSearchTextField;
    private javax.swing.JButton customerNameSearchButton;
    private javax.swing.JLabel customerNameSearchLabel;
    private javax.swing.JTextField customerNameSearchTextField;
    private javax.swing.JButton customerUserIdSearchButton;
    private javax.swing.JLabel customerUserIdSearchLabel;
    private javax.swing.JFormattedTextField customerUserIdSearchTextField;
    private javax.swing.JButton deleteProduct;
    private javax.swing.JLabel labelProductQuantity;
    private javax.swing.JLabel labelSaleState;
    private javax.swing.JLabel labelSaleTotal;
    private javax.swing.JLabel labelSaleTotalValue;
    private javax.swing.JLabel labelSaleType;
    private javax.swing.JPanel panelBillFooter;
    private javax.swing.JPanel panelBillForm;
    private javax.swing.JPanel panelBilling;
    private javax.swing.JPanel panelContainer;
    private javax.swing.JPanel panelProducts;
    private javax.swing.JPanel panelProductsForm;
    private javax.swing.JPanel panelTopBar;
    private javax.swing.JButton productIdSearchButton;
    private javax.swing.JLabel productIdSearchLabel;
    private javax.swing.JFormattedTextField productIdSearchTextField;
    private javax.swing.JButton productNameSearchButton;
    private javax.swing.JLabel productNameSearchLabel;
    private javax.swing.JTextField productNameSearchTextField;
    private javax.swing.JScrollPane productsTableScrollPane;
    private javax.swing.JScrollPane recommenderAddedTableScrollPane;
    private javax.swing.JScrollPane scrollPanePanelCustomers;
    private javax.swing.JScrollPane scrollPanePanelProducts;
    private javax.swing.JPanel searchProductsPanel;
    private javax.swing.JPanel searchRecommenderAddedPanel;
    private javax.swing.JPanel submitButtonPanel1;
    private javax.swing.JButton submitSaleBill;
    private javax.swing.JTable tableCustomers;
    private javax.swing.JTable tableProducts;
    private javax.swing.JTable tableProductsBill;
    private javax.swing.JFormattedTextField textFieldProductQuantity;
    // End of variables declaration//GEN-END:variables

}
